/*
Bullet Continuous Collision Detection and Physics Library Maya Plugin
Copyright (c) 2008 Walt Disney Studios

This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising
from the use of this software.
Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it freely,
subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must
not claim that you wrote the original software. If you use this
software in a product, an acknowledgment in the product documentation
would be appreciated but is not required.
2. Altered source versions must be plainly marked as such, and must
not be misrepresented as being the original software.
3. This notice may not be removed or altered from any source distribution.

Written by: Nicola Candussi <nicola@fluidinteractive.com>

Modified by Roman Ponomarev <rponom@gmail.com>
01/22/2010 : Constraints reworked

Modified by Michael Baker <michael@mBakr.com>
for previous notes, check rev history in Dynamica repo: http://code.google.com/p/dynamica/
4/26/2011 : fixed issue with solver sync startframe creating multiple scriptJobs when the UI was opened and closed repeatedly
4/26/2011 : UI code cleanup
4/26/2011 : fixed issues: rigid body creation not respecting object transform in world space, frozen/unfrozen transforms weirdness, and center of mass problems
4/26/2011 : renamed Solver tab to Options
4/26/2011 : removed Solver Type from Options tab
4/26/2011 : added collision margin field to Options tab
4/26/2011 : cleaned up Option tab UI
4/26/2011 : fixed issue: contraint creation between 2 RBs not centered between RBs
4/27/2011 : added pre-keyed object detection to rigid body creation - pre-keyed objects are converted to kinematic colliders
4/30/2011 : fixed issue: creating a rigid body with a NURBS object selected crashing Maya
4/30/2011 : fixed issue: detecting rigid body connections on selected objects would fail if a dRB and incompatible (NURBS, curves, etc.) object were selected
5/3/2011 : fixed issue: changing solver attributes in the channel box would not update the Dynamica window.
5/3/2011 : set starting physicsrate to 60, default 200 was causing performance problems

roadmap 5/3/2011

Next release:

Create tab: 
- Active/Passive RB creation (correct center of mass, respect source mesh transform, handle pre-keyed objects)
- Constraint creation (center between RBs, handle single/double/multi-selection, expose break threshold)

Options tab:
- Collision margin control

Activate tab:
- simplify RB activation controls (conform to new RB/mesh connections)
- remove constraint breaking (currently unstable)

Bake tab:
- simplify/modify baking process (conform to new RB/mesh connections, provide better feedback)

Future release:

- integrate compound object breaking stuff
- create secondary UI for advanced features like volume/mass calculation, rope creation, shatter tools, Polycutter, etc.
- integrate log panel into dynamicaUI - to provide better feedback to user

*/

//dynamicaUI.mel

//int
global proc dynamicaUI_initialize()
{
	//this proc is called from the plugin
	print("loading Dynamica plugin...\n");
	dynamicaUI_createShelf();
	print("Dynamica plugin loaded.\n");
}
    
global proc dynamicaUI_init()
{	
	source "mbUtils";
	
	global int $dynamicaUI_syncSolverJob;
	global float $dynamicaUI_startFrame;
	
	$dynamicaUI_startFrame = `playbackOptions -q -min`; //init start frame
	dynamicaUI_onSceneOpen(); //puppet callback for SceneOpened event
	playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 1; //set playback options
	setAttr dSolver1.physicsrate 60; //set physicsrate
}

//shelf
global proc dynamicaUI_createShelf()
{
	string $shelf = "Dynamica";
	string $btnParent;
	
	if ( `shelfLayout -ex $shelf` )
	{
		$btnParent = $shelf;
		string $existingShelfButtons[] = `shelfLayout -q -ca $shelf`;
		for ( $btn in $existingShelfButtons ) deleteUI $btn;
	} 
	else 
	{
		// Create the shelf under the global shelf parent.
		global string $gShelfTopLevel;
		$btnParent = `shelfLayout -p $gShelfTopLevel $shelf`;
	}

	// Make (or remake) the tool button.
	shelfButton -i1 "dynamicaMainWindow.xpm" -c "dynamicaUI_createWindow" -ann "Open Main Dynamica Window" -p $btnParent;
	
	shelfButton -i1 "dynamicaCreateActiveSphere.xpm" 
		-c "dynamicaUI_createRigidBody(true, 5)" -ann "Create active sphere rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreateActiveCube.xpm" 
		-c "dynamicaUI_createRigidBody(true, 4)" -ann "Create active box rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreateActiveHull.xpm" 
		-c "dynamicaUI_createRigidBody(true, 0)" -ann "Create active hull rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreateActiveMesh.xpm"
		-c "dynamicaUI_createRigidBody(true, 1)" -ann "Create active mesh rigid bodies" -p $btnParent;
		
	shelfButton -i1 "dynamicaCreatePassiveSphere.xpm" 
		-c "dynamicaUI_createRigidBody(false, 5)" -ann "Create passive sphere rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreatePassiveCube.xpm" 
		-c "dynamicaUI_createRigidBody(false, 4)" -ann "Create passive box rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreatePassiveHull.xpm" 
		-c "dynamicaUI_createRigidBody(false, 0)" -ann "Create passive hull rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreatePassiveMesh.xpm" 
		-c "dynamicaUI_createRigidBody(false, 1)" -ann "Create passive mesh rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreatePassiveBvhMesh.xpm" 
		-c "dynamicaUI_createRigidBody(false, 1)" -ann "Create passive mesh rigid bodies" -p $btnParent;
	shelfButton -i1 "dynamicaCreatePassivePlane.xpm" 
		-c "dynamicaUI_createRigidBody(false, 6)" -ann "Create passive plane rigid bodies" -p $btnParent;
		
	// shelfButton -i1 "dynamicaCreateActiveSphereArray.xpm"
		// -c "dynamicaUI_createRigidBodyArray(true, 5)" -ann "Create an active sphere rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreateActiveCubeArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(true, 4)" -ann "Create an active box rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreateActiveHullArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(true, 0)" -ann "Create an active hull rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreateActiveMeshArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(true, 1)" -ann "Create an active mesh rigid body array" -p $btnParent;
		
	// shelfButton -i1 "dynamicaCreatePassiveSphereArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 5)" -ann "Create an passive sphere rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreatePassiveCubeArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 4)" -ann "Create an passive box rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreatePassiveHullArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 0)" -ann "Create an passive hull rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreatePassiveMeshArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 1)" -ann "Create an passive mesh rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreatePassiveBvhMeshArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 1)" -ann "Create an passive mesh rigid body array" -p $btnParent;
	// shelfButton -i1 "dynamicaCreatePassivePlaneArray.xpm" 
		// -c "dynamicaUI_createRigidBodyArray(false, 6)" -ann "Create an passive plane rigid body array" -p $btnParent;
		
	shelfButton -i1 "dynamicaCreateNailConstraint.xpm" 
		-c "dynamicaUI_createConstraint(0)" -ann "Create a nail constraint" -p $btnParent;
	shelfButton -i1 "dynamicaCreateHingeConstraint.xpm" 
		-c "dynamicaUI_createConstraint(1)" -ann "Create a hinge constraint" -p $btnParent;
	shelfButton -i1 "dynamicaCreateSliderConstraint.xpm" 
		-c "dynamicaUI_createConstraint(2)" -ann "Create a slider constraint" -p $btnParent;
	shelfButton -i1 "dynamicaCreate6dofConstraint.xpm" 
		-c "dynamicaUI_createConstraint(3)" -ann "Create a 6dof constraint" -p $btnParent;
		
	shelfButton -i1 "dynamicaActivateX.xpm" 
		-c "dynamicaUI_activateAxis(0)" -ann "Activate selected rigid bodies along the +X axis" -p $btnParent;
	shelfButton -i1 "dynamicaActivate-X.xpm" 
		-c "dynamicaUI_activateAxis(1)" -ann "Activate selected rigid bodies along the -X axis" -p $btnParent;
	shelfButton -i1 "dynamicaActivateY.xpm" 
		-c "dynamicaUI_activateAxis(2)" -ann "Activate selected rigid bodies along the +Y axis" -p $btnParent;
	shelfButton -i1 "dynamicaActivate-Y.xpm" 
		-c "dynamicaUI_activateAxis(3)" -ann "Activate selected rigid bodies along the -Y axis" -p $btnParent;
	shelfButton -i1 "dynamicaActivateZ.xpm" 
		-c "dynamicaUI_activateAxis(4)" -ann "Activate selected rigid bodies along the +Z axis" -p $btnParent;
	shelfButton -i1 "dynamicaActivate-Z.xpm" 
		-c "dynamicaUI_activateAxis(5)" -ann "Activate selected rigid bodies along the -Z axis" -p $btnParent;
		
	shelfButton -i1 "dynamicaActivateRadial.xpm" 
		-c "dynamicaUI_activateAxis(6)" -ann "Activate selected rigid bodies outwards" -p $btnParent;
	shelfButton -i1 "dynamicaActivateRadialIn.xpm" 
		-c "dynamicaUI_activateAxis(7)" -ann "Activate selected rigid bodies inwards" -p $btnParent;
		
	shelfButton -i1 "dynamicaDeactivate.xpm" 
		-c "dynamicaUI_deactivateRigidBodies()" -ann "Remove activation from selected rigid bodies" -p $btnParent;
		
	shelfButton -i1 "dynamicaBakeSelected.xpm" 
		-c "$dynamicaUI_bakeAll = 0; dynamicaUI_bakeRigidBodies()" -ann "Bake Selected Rigid Bodies" -p $btnParent;
	shelfButton -i1 "dynamicaBakeAll.xpm" 
		-c "$dynamicaUI_bakeAll = 1; dynamicaUI_bakeRigidBodies()" -ann "Bake All Rigid Bodies" -p $btnParent;
}

//UI
global proc dynamicaUI_createWindow()
{
	print "Opening Main Dynamica Window...\n";
	global string $dynamicaUI_window;
	global string $dynamicaUI_tabs;

	if ( `window -ex $dynamicaUI_window` )
	{
		showWindow $dynamicaUI_window;
		return;
	}

	//create dSolver node if necessary
	dSolver;

	$dynamicaUI_window = `window -s 1 -t "Dynamica - powered by Bullet" -in "Dynamica"`;
	string $mainForm = `formLayout`;
	$dynamicaUI_tabs = `tabLayout -imw 5 -imh 5 -scr 0`;

	formLayout -e 
		-af $dynamicaUI_tabs "top" 0 -af $dynamicaUI_tabs "left" 0 
		-af $dynamicaUI_tabs "bottom" 0 -af $dynamicaUI_tabs "right" 0 
	$mainForm;

	string $mainLayt = dynamicaUI_createMainTab();
	string $activateLayt = dynamicaUI_createActivateTab();
	string $bakeLayt = dynamicaUI_createBakeTab();
	string $solverLayt = dynamicaUI_createOptionsTab();

	tabLayout -e 
		-tl $mainLayt "Create" 
		-tl $activateLayt "Activate" 
		-tl $bakeLayt "Bake"
		-tl $solverLayt "Options" 
	$dynamicaUI_tabs;

	dynamicaUI_init();

	showWindow $dynamicaUI_window;
	window -e -wh 500 480 $dynamicaUI_window;
}

global proc string dynamicaUI_createMainTab()
{
	//collision shape types: 0 = Hull, 1 = Mesh, 2 = Cylinder, 3 = Capsule, 4 = Box, 5 = Sphere, 6 = Plane
	string $mainForm = `columnLayout -adj 1`;
		dynamicaUI_createFrame("Active Rigid Bodies", 0, 0);
			rowLayout -nc 5;
				iconTextButton -st "iconAndTextVertical" -l "Sphere" -w 75 -i1 "dynamicaCreateActiveSphere.xpm" 
					-c "dynamicaUI_createRigidBody(true, 5)" -ann "Create an active sphere rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Box" -w 75 -i1 "dynamicaCreateActiveCube.xpm" 
					-c "dynamicaUI_createRigidBody(true, 4)" -ann "Create an active box rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Hull" -w 75 -i1 "dynamicaCreateActiveHull.xpm" 
					-c "dynamicaUI_createRigidBody(true, 0)" -ann "Create an active hull rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Mesh" -w 75 -i1 "dynamicaCreateActiveMesh.xpm"
					-c "dynamicaUI_createRigidBody(true, 1)" -ann "Create an active mesh rigid body";
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Passive Rigid Bodies", 0, 0);
			rowLayout -nc 6;
				iconTextButton -st "iconAndTextVertical" -l "Sphere" -w 75 -i1 "dynamicaCreatePassiveSphere.xpm" 
					-c "dynamicaUI_createRigidBody(false, 5)" -ann "Create an passive sphere rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Box" -w 75 -i1 "dynamicaCreatePassiveCube.xpm" 
					-c "dynamicaUI_createRigidBody(false, 4)" -ann "Create an passive box rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Hull" -w 75 -i1 "dynamicaCreatePassiveHull.xpm" 
					-c "dynamicaUI_createRigidBody(false, 0)" -ann "Create an passive hull rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Mesh" -w 75 -i1 "dynamicaCreatePassiveMesh.xpm" 
					-c "dynamicaUI_createRigidBody(false, 1)" -ann "Create an passive mesh rigid body";

				iconTextButton -st "iconAndTextVertical" -l "BvhMesh" -w 75 -i1 "dynamicaCreatePassiveBvhMesh.xpm" 
					-c "dynamicaUI_createRigidBody(false, 1)" -ann "Create an passive mesh rigid body";

				iconTextButton -st "iconAndTextVertical" -l "Plane" -w 75 -i1 "dynamicaCreatePassivePlane.xpm" 
					-c "dynamicaUI_createRigidBody(false, 6)" -ann "Create an passive plane rigid body";
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Active Rigid Body Arrays", 0, 0);
			rowLayout -nc 5;
				iconTextButton -st "iconAndTextVertical" -l "Sphere" -w 75 -i1 "dynamicaCreateActiveSphereArray.xpm"
					-c "dynamicaUI_createRigidBodyArray(true, 5)" -ann "Create an active sphere rigid body array";

				iconTextButton -st "iconAndTextVertical" -l "Box" -w 75 -i1 "dynamicaCreateActiveCubeArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(true, 4)" -ann "Create an active box rigid body array";

				iconTextButton -st "iconAndTextVertical" -l "Hull" -w 75 -i1 "dynamicaCreateActiveHullArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(true, 0)" -ann "Create an active hull rigid body array";

				iconTextButton -style "iconAndTextVertical" -label "Mesh" -w 75 -i1 "dynamicaCreateActiveMeshArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(true, 1)" -ann "Create an active mesh rigid body array";
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Passive Rigid Body Arrays", 0, 0);
			rowLayout -nc 6;
				iconTextButton -st "iconAndTextVertical" -l "Sphere" -w 75 -i1 "dynamicaCreatePassiveSphereArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 5)" -ann "Create an passive sphere rigid body array";

				iconTextButton -st "iconAndTextVertical" -l "Box" -w 75 -i1 "dynamicaCreatePassiveCubeArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 4)" -ann "Create an passive box rigid body array";

				iconTextButton -st "iconAndTextVertical" -l "Hull" -w 75 -i1 "dynamicaCreatePassiveHullArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 0)" -ann "Create an passive hull rigid body array";

				iconTextButton -st "iconAndTextVertical" -l "Mesh" -w 75 -i1 "dynamicaCreatePassiveMeshArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 1)" -ann "Create an passive mesh rigid body array";

				iconTextButton -style "iconAndTextVertical" -l "BvhMesh" -w 75 -i1 "dynamicaCreatePassiveBvhMeshArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 1)" -ann "Create an passive mesh rigid body array";

				iconTextButton -style "iconAndTextVertical" -l "Plane" -w 75 -i1 "dynamicaCreatePassivePlaneArray.xpm" 
					-c "dynamicaUI_createRigidBodyArray(false, 6)" -ann "Create an passive plane rigid body array";
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Constraints", 0, 0);
			rowLayout -nc 5;
				iconTextButton -st "iconAndTextVertical" -l "Nail" -w 75 -i1 "dynamicaCreateNailConstraint.xpm" 
					-c "dynamicaUI_createConstraint(0)" -ann "Create a nail constraint";
				
				iconTextButton -st "iconAndTextVertical" -l "Hinge" -w 75 -i1 "dynamicaCreateHingeConstraint.xpm" 
					-c "dynamicaUI_createConstraint(1)" -ann "Create a hinge constraint";
				
				iconTextButton -st "iconAndTextVertical" -l "Slider" -w 75  -i1 "dynamicaCreateSliderConstraint.xpm" 
					-c "dynamicaUI_createConstraint(2)" -ann "Create a slider constraint";
				
				iconTextButton -st "iconAndTextVertical" -l "6Dof" -w 75 -i1 "dynamicaCreate6dofConstraint.xpm" 
					-c "dynamicaUI_createConstraint(3)" -ann "Create a 6dof constraint";
	
				// iconTextButton -st "iconAndTextVertical" -l "ConeTwist" -w 80 -i1 "dynamicaCreateConeTwistConstraint.xpm" 
				// -c "dynamicaUI_createConeTwistConstraint" -ann "Create a conetwist constraint";
			setParent ..;
		setParent ..;
	setParent ..;
	
	return $mainForm;
}

global proc string dynamicaUI_createActivateTab() 
{
	global float $dynamicaUI_activateStartFrame = 24;
	global float $dynamicaUI_activateEndFrame = 48;
	global int $dynamicaUI_setActivationFrame = 0;
	global int $dynamicaUI_activationFrame = 24;
	global int $dynamicaUI_activateInputMethod = 0; //0 = Axis Gradient, 1 = Radial Gradient, 2 = 3D Texture
	global int $dynamicaUI_activateAxis = 0; //0 = +X, 1 = -X, 2 = +Y, 3 = -Y, 4 = +Z, 5 = -Z, 6 = radial out, 7 = radial in
	global string $dynamicaUI_activateTexture;
	global string $dynamicaUI_3dTextureNodes[];
	global string $dynamicaUI_3dTextureList;
	
	string $mainForm = `columnLayout -adj 1`;
		dynamicaUI_createFrame("Frame Range", 0, 0);
			rowLayout -nc 2;
				floatField -pre 3 -w 50 -v $dynamicaUI_activateStartFrame 
					-cc "$dynamicaUI_activateStartFrame = `floatField -q -v activateStart`" activateStart;
				floatField -pre 3 -w 50 -v $dynamicaUI_activateEndFrame 
					-cc "$dynamicaUI_activateEndFrame = `floatField -q -v activateEnd`" activateEnd;
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Axis Activation", 0, 0);
			rowLayout -nc 6;
				iconTextButton -st "iconAndTextVertical" -l "+X Axis" -w 75 -i1 "dynamicaActivateX.xpm" 
					-c "dynamicaUI_activateAxis(0)" -ann "Activate selected rigid bodies along the +X axis";
				iconTextButton -st "iconAndTextVertical" -l "-X Axis" -w 75 -i1 "dynamicaActivate-X.xpm" 
					-c "dynamicaUI_activateAxis(1)" -ann "Activate selected rigid bodies along the -X axis";
				iconTextButton -st "iconAndTextVertical" -l "+Y Axis" -w 75 -i1 "dynamicaActivateY.xpm" 
					-c "dynamicaUI_activateAxis(2)" -ann "Activate selected rigid bodies along the +Y axis";
				iconTextButton -st "iconAndTextVertical" -l "-Y Axis" -w 75 -i1 "dynamicaActivate-Y.xpm" 
					-c "dynamicaUI_activateAxis(3)" -ann "Activate selected rigid bodies along the -Y axis";
				iconTextButton -st "iconAndTextVertical" -l "+Z Axis" -w 75 -i1 "dynamicaActivateZ.xpm" 
					-c "dynamicaUI_activateAxis(4)" -ann "Activate selected rigid bodies along the +Z axis";
				iconTextButton -st "iconAndTextVertical" -l "-Z Axis" -w 75 -i1 "dynamicaActivate-Z.xpm" 
					-c "dynamicaUI_activateAxis(5)" -ann "Activate selected rigid bodies along the -Z axis";
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Radial Activation", 0, 0);
			rowLayout -nc 2;
				iconTextButton -st "iconAndTextVertical" -l "Outward" -w 75 -i1 "dynamicaActivateRadial.xpm" 
					-c "dynamicaUI_activateAxis(6)" -ann "Radially activate selected rigid bodies outwards";
				iconTextButton -st "iconAndTextVertical" -l "Inward" -w 75 -i1 "dynamicaActivateRadialIn.xpm" 
					-c "dynamicaUI_activateAxis(7)" -ann "Radially activate selected rigid bodies inwards";
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Remove Activation", 0, 0);
			rowLayout -nc 1;
				iconTextButton -st "iconAndTextVertical" -l "Deactivate" -w 75 -i1 "dynamicaDeactivate.xpm" 
					-c "dynamicaUI_deactivateRigidBodies()" -ann "Remove activation from selected rigid bodies";
			setParent ..;
		setParent ..;
	setParent ..;

	return $mainForm;
}

global proc string dynamicaUI_createBakeTab() 
{
	global int $dynamicaUI_deleteEmptyNodes = 1;
	global int $dynamicaUI_deleteBakeHistory = 1;
	global int $dynamicaUI_deleteStaticChannels = 1;
	global int $dynamicaUI_optimizeChannels = 1;
	global int $dynamicaUI_bakeAll = 1;
	global float $dynamicaUI_bakeStartFrame;
	global float $dynamicaUI_bakeEndFrame;
	
	float $start = `playbackOptions -q -min`;
	float $end = `playbackOptions -q -max`;

	string $mainForm = `columnLayout -adj 1`;
		dynamicaUI_createFrame("Frame Range", 0, 0);
			rowLayout -nc 2;
				floatField -pre 3 -w 50 -v $start -cc "$dynamicaUI_bakeStartFrame = `floatField -q -v bakeStart`" bakeStart;
				floatField -pre 3 -w 50 -v $end -cc "$dynamicaUI_bakeEndFrame = `floatField -q -v bakeEnd`" bakeEnd;
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Bake Operation", 0, 0);
			rowLayout -nc 2;
				iconTextButton -st "iconAndTextVertical" -l "Bake Selected" -w 75 -i1 "dynamicaBakeSelected.xpm" 
					-c "$dynamicaUI_bakeAll = 0; dynamicaUI_bakeRigidBodies()" -ann "Bake Selected Rigid Bodies";
				iconTextButton -st "iconAndTextVertical" -l "Bake All" -w 75 -i1 "dynamicaBakeAll.xpm" 
					-c "$dynamicaUI_bakeAll = 1; dynamicaUI_bakeRigidBodies()" -ann "Bake All Rigid Bodies";
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Options", 1, 1);
			columnLayout;
				checkBox -l "Delete History (Recommended)" -v $dynamicaUI_deleteBakeHistory 
					-cc "$dynamicaUI_deleteBakeHistory  = `checkBox -q -v bakeHistory`" bakeHistory;
				checkBox -l "Delete Static Channels (Recommended)" -v $dynamicaUI_deleteStaticChannels 
					-cc "$dynamicaUI_deleteStaticChannels  = `checkBox -q -v bakeChannels`" bakeChannels;
				checkBox -l "Delete Empty Nodes (Recommended)" -v $dynamicaUI_deleteEmptyNodes 
					-cc "$dynamicaUI_deleteEmptyNodes  = `checkBox -q -v bakeEmpty`" bakeEmpty;
				checkBox -l "Optimize Channels (Recommended)" -v $dynamicaUI_optimizeChannels
					-cc "$dynamicaUI_optimizeChannels  = `checkBox -q -v bakeOptimize`" bakeOptimize;
			setParent ..;
		setParent ..;
	setParent ..;

	return $mainForm;
}

global proc string dynamicaUI_createOptionsTab()
{	
	global string $dynamicaUI_STsolverType;
	global string $dynamicaUI_STgravityX;
	global string $dynamicaUI_STgravityY;
	global string $dynamicaUI_STgravityZ;
	global string $dynamicaUI_STenabled;
	global string $dynamicaUI_STsplitImpulse;
	global string $dynamicaUI_STsubsteps;
	global string $dynamicaUI_STphysicsrate;
	global string $dynamicaUI_STcollisionMargin; //why are these strings?
	
	string $mainForm = `columnLayout -adj 1`;
		dynamicaUI_createFrame("Gravity", 0, 0);
			rowLayout -nc 3;
				float $gravity[] = `getAttr dSolver1.gravity`;
				$dynamicaUI_STgravityX = `floatField -pre 3 -w 50 -v $gravity[0]`;
				$dynamicaUI_STgravityY = `floatField -pre 3 -w 50 -v $gravity[1]`;
				$dynamicaUI_STgravityZ = `floatField -pre 3 -w 50 -v $gravity[2]`;
				connectControl $dynamicaUI_STgravityX dSolver1.gravityX;
				connectControl $dynamicaUI_STgravityY dSolver1.gravityY;
				connectControl $dynamicaUI_STgravityZ dSolver1.gravityZ;
			setParent ..;
		setParent ..;
			
		dynamicaUI_createFrame("Physics Framerate (Hertz)", 0, 0);
			rowLayout -nc 1;
				int $physicsrate= `getAttr dSolver1.physicsrate`; 
				$dynamicaUI_STphysicsrate = `intField -v $physicsrate -w 50`;
				connectControl $dynamicaUI_STphysicsrate dSolver1.physicsrate;
			setParent ..;
		setParent ..;

		dynamicaUI_createFrame("Substeps", 0, 0);
			rowLayout -nc 1;
				int $substeps = `getAttr dSolver1.substeps`; 
				$dynamicaUI_STsubsteps = `intField -v $substeps -w 50`;
				connectControl $dynamicaUI_STsubsteps dSolver1.substeps;
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Collision Margin", 0, 0);
			rowLayout -nc 1;
				float $collisionMargin = 0.04; //`getAttr dSolver1.collisionMargin`; 
				$dynamicaUI_STcollisionMargin = `floatField -pre 3 -w 50 -v $collisionMargin`;
				connectControl $dynamicaUI_STcollisionMargin dSolver1.collisionMargin;
			setParent ..;
		setParent ..;
		
		dynamicaUI_createFrame("Solver State", 0, 0);
			rowLayout -nc 1;
				int $enabled = `getAttr dSolver1.enabled`;
				$dynamicaUI_STenabled = `checkBox -l "Enabled" -v $enabled`;
				connectControl $dynamicaUI_STenabled dSolver1.enabled;
			setParent ..;
		setParent ..;
			
		dynamicaUI_createFrame("SplitImpulse", 0, 0);
			rowLayout -nc 1;
				int $enabled = `getAttr dSolver1.splitImpulse`;
				$dynamicaUI_STsplitImpulse = `checkBox -l "Enabled" -v $enabled`;
				connectControl $dynamicaUI_STsplitImpulse dSolver1.splitImpulse;
			setParent ..;
		setParent ..;
	setParent ..;
	
	return $mainForm;
}

global proc string dynamicaUI_createHelpTab()
{	
	string $mainForm = `columnLayout -adj 1`;
	// {
		// frameLayout -h 375 -label "Documentation" -li 5 -mh 10 -mw 10 -borderStyle "etchedIn";
			// columnLayout;
				// button -label "View the online wiki" -c "system(\"load http://bulletphysics.org\")";
				
				// separator -style "none" -h 5;
				// text -label "http://bulletphysics.org";
				// separator -style "none" -h 5;
				// text -label "HTML documentation in doc folder under Dynamica install\nex. C:\\Program Files\\DynamicaBullet2.77\\doc\\";
				
				// setParent ..;
			// setParent ..;
		// setParent ..;
	// }

	return $mainForm;
}

global proc string dynamicaUI_createFrame(string $label, int $collapsable, int $collapsed) 
{
	return `frameLayout -cll $collapsable -cl $collapsed -mh 3 -mw 6 -w 486 -bv 0 -l $label`;
}

//utility procs

global proc dynamicaUI_createRigidBody(int $activebody, int $collisionShapeType)
{
	//collision shape types: 0 = Hull, 1 = Mesh, 2 = Cylinder, 3 = Capsule, 4 = Box, 5 = Sphere, 6 = Plane
	global float $dynamicaUI_startFrame;
	float $mass = 1; 
	string $meshLayer = "DynamicaInputMeshes";
	string $rbLayer = "DynamicaRigidBodies";
	string $obSelection[] = `ls -sl`;
	string $selection[] = `ls -selection -dag -leaf -showType -type "geometry"`;
	string $newBodies[];
	string $rbGroup;
	string $meshGroup;
	int $bodyCount = 0;
	int $makeCollisionShape = 1;

	if ($activebody == false) $mass = 0;
	
	//create dSolver node if necessary
	dSolver;
	
	//pick the selected object's transform only if we are creating a hull or a mesh
	if ($collisionShapeType == 0 || $collisionShapeType == 1) 
	{
		if (size($selection))
		{
			print("// Dynamica: Creating rigid bodies...\n");
		
			//create groups and layers if necessary
			$rbGroup = `group -em -n dRigidBodies`;
			$meshGroup = `group -em -n dMeshes`;
			mbHideAndLockTransform($rbGroup);
			mbHideAndLockTransform($meshGroup);
			mbCreateLayer($meshLayer, 1);
			mbCreateLayer($rbLayer, 0);
			setAttr ($rbLayer + ".shading") 0; //disable shading
		
			for ($i = 0; $i < size($selection) / 2; $i++) 
			{
				string $connectedCollisionShapes[] = `listConnections -s 1 -t dCollisionShape $selection[$i * 2]`;
				if(size($connectedCollisionShapes) > 0) $makeCollisionShape = 0;
				
				string $shapeTransforms[] = `listRelatives -parent $selection[$i * 2]`;
				if ($makeCollisionShape)
				{	
					if (mbIsMesh($obSelection[$i]))
					{
						//process transform if not keyed
						if (!mbIsKeyed($obSelection[$i]))
						{
							mbFreezeScale($obSelection[$i]);
							mbUnFreezeTranslation($obSelection[$i]);
						}
						
						string $rigidBodyNode = `dRigidBody`;
						string $collisionShapeNode = `createNode dCollisionShape`;
						connectAttr ($collisionShapeNode + ".outCollisionShape") ($rigidBodyNode + ".inCollisionShape");
						string $rigidBodyTransforms[] = `listRelatives -parent $rigidBodyNode`;
						
						if ($selection[$i * 2 + 1] == "mesh") {
							connectAttr ($selection[$i * 2] + ".message") ($collisionShapeNode + ".inShape");
							setAttr ($rigidBodyTransforms[0] + ".overrideEnabled") 1;
							setAttr ($rigidBodyTransforms[0] + ".overrideShading") 0;		
						}
						
						if (mbIsKeyed($obSelection[$i]))
						{
							warning("Dynamica: Object " + $obSelection[$i] + "'s transform is keyed, creating kinematic collider...");
							$mass = 0;
							mbTransferKeys($obSelection[$i], $rigidBodyTransforms[0], 1);
						}
						
						setAttr ($rigidBodyNode + ".mass" ) $mass;
						setAttr ($collisionShapeNode + ".type" ) $collisionShapeType;

						float $pos[]= `getAttr ($shapeTransforms[0] + ".translate")`;
						float $rot[]= `getAttr ($shapeTransforms[0] + ".rotate")`;

						setAttr ($rigidBodyTransforms[0] + ".translate") -type double3 $pos[0] $pos[1] $pos[2];
						setAttr ($rigidBodyNode + ".initialPosition") -type double3 $pos[0] $pos[1] $pos[2];

						setAttr ($rigidBodyTransforms[0] + ".rotate") -type double3 $rot[0] $rot[1] $rot[2];
						setAttr ($rigidBodyNode + ".initialRotation") -type double3 $rot[0] $rot[1] $rot[2];

						connectAttr ($rigidBodyTransforms[0] + ".translate") ($shapeTransforms[0] + ".translate");
						connectAttr ($rigidBodyTransforms[0] + ".rotate") ($shapeTransforms[0] + ".rotate");
						connectAttr ($rigidBodyTransforms[0] + ".scale") ($shapeTransforms[0] + ".scale");
						
						$newBodies[$i] = $rigidBodyTransforms[0];
						
						//add to groups and layers
						mbAddToLayer($shapeTransforms[0], $meshLayer); //editDisplayLayerMembers -nr $meshLayer $shapeTransforms[0];
						mbAddToLayer($rigidBodyNode, $rbLayer);
						parent $shapeTransforms[0] $meshGroup;
						parent $rigidBodyNode $rbGroup;
						$bodyCount++;
					}
					else
					{
						warning("Dynamica: " + $obSelection[$i] + " is not a Polymesh, rigid body not created!");
					}
				}
				else
				{
					warning("Dynamica: Object " + $shapeTransforms[0] + " is already connected to a rigid body");
					//$newBodies[$i] = $shapeTransforms[0];
				}
				$makeCollisionShape = 1;
			}
			print ("// Dynamica: " + $bodyCount + " rigid bodies created.\n");
		}
		else
		{
			warning("Dynamica: Unable to create rigid body(s) of hull or mesh type, select Polymesh objects first...");
		}
	} 
	else //create primitive
	{
		string $rigidBodyNode = `dRigidBody`;
		string $collisionShapeNode = `createNode dCollisionShape`;
		connectAttr ($collisionShapeNode + ".outCollisionShape") ($rigidBodyNode + ".inCollisionShape");
		string $rigidBodyTransforms[] = `listRelatives -parent $rigidBodyNode`;

		setAttr ($rigidBodyNode + ".mass" ) $mass;
		setAttr ($collisionShapeNode + ".type" ) $collisionShapeType;
		$newBodies[0] = $rigidBodyTransforms[0];
		
		print ("// Dynamica: Rigid body primitive created.\n");
	}

	currentTime $dynamicaUI_startFrame; //force refresh
	select -r $newBodies;
}

global proc dynamicaUI_createConstraint(int $constraintType)
{
	//0 = Nail, 1 = Hinge, 2 = Slider, 3 = 6Dof
	
	string $selection[] = `ls -sl`;
	string $constraintTransforms[];
	$selection = `listRelatives -s $selection`;
	string $constraintNode;
	string $newConstraintTransf;
	
	//create dSolver node if necessary
	dSolver;
	// check selection in scene : one or two rigidBodies should be selected
	int $selSize = size($selection);
	int $selOK = (($selSize == 1) || ($selSize == 2));

	if ($selSize > 2) //more than 2 objects selected
	{
		dynamicaUI_constrainMultiple($constraintType);
		return;
	}
	
	for ($s in $selection) 
	{	 
		if(`nodeType $s` != "dRigidBody") 
		{
			$selOK = 0;
		}
	}
	if(!$selOK)
	{
		error("Dynamica: Select one or two bodies to create a constraint");
		return;
	}
	//create nail constraint node
	switch ($constraintType)
	{
		case 0:
			$constraintNode = `dNailConstraint`;
			break;
		case 1:
			$constraintNode = `dHingeConstraint`;
			break;
		case 2:
			$constraintNode = `dSliderConstraint`;
			break;
		case 3:
			$constraintNode = `dSixdofConstraint`;
			break;
	}
	
	$constraintTransforms = `listRelatives -parent $constraintNode`;
	$newConstraintTransf = $constraintTransforms[0];
	//connect to bodies
	if($selSize == 1)
	{
		connectAttr ($selection[0] + ".message") ($constraintNode + ".inRigidBodyA");
		string $rbTransform[] = `listRelatives -parent $selection[0]`;
		float $posA[3] = `getAttr ($rbTransform[0] + ".translate")`;
		float $iWorldA[16] = `getAttr ($rbTransform[0] + ".worldMatrix")`;
		float $pivA[] = dynamicaUI_worldToObj($posA, $iWorldA);
		setAttr ($constraintNode + ".pivotInA") -type float3 $pivA[0] $pivA[1] $pivA[2];
		setAttr ($newConstraintTransf + ".translate") -type float3 $posA[0] $posA[1] $posA[2];
	}
	else
	{
		connectAttr ($selection[0] + ".message") ($constraintNode + ".inRigidBodyA");
		connectAttr ($selection[1] + ".message") ($constraintNode + ".inRigidBodyB");
		string $rbTransformA[] = `listRelatives -parent $selection[0]`;
		string $rbTransformB[] = `listRelatives -parent $selection[1]`;
		float $posA[] = `getAttr ($rbTransformA[0] + ".translate")`;
		float $posB[] = `getAttr ($rbTransformB[2] + ".translate")`;
		float $pivW[3];
		//move constraint to midpoint between each rigid body
		$pivW[0] = mbLerpScalar($posA[0], $posB[0], 0.5);
		$pivW[1] = mbLerpScalar($posA[1], $posB[1], 0.5);
		$pivW[2] = mbLerpScalar($posA[2], $posB[2], 0.5);
		float $iWorldA[16] = `getAttr ($rbTransformA[0] + ".worldMatrix")`;
		float $iWorldB[16] = `getAttr ($rbTransformB[0] + ".worldMatrix")`;
		float $pivA[] = dynamicaUI_worldToObj($pivW, $iWorldA);
		float $pivB[] = dynamicaUI_worldToObj($pivW, $iWorldB);
		setAttr ($constraintNode + ".pivotInA") -type float3 $pivA[0] $pivA[1] $pivA[2];
		setAttr ($constraintNode + ".pivotInB") -type float3 $pivB[0] $pivB[1] $pivB[2];
		setAttr ($newConstraintTransf + ".translate") -type float3 $pivW[0] $pivW[1] $pivW[2];
	}
	select -r $newConstraintTransf;
}

global proc dynamicaUI_constrainMultiple(int $constraintType)
{
	string $sel[] = `ls -sl`;
	string $nearest[];

	//filter selection
	for ($s in $sel) if (!mbIsType($s, "dRigidBody")) select -d $s;
	
	//update selection, collect nearest
	$sel = `ls -sl`;
	for ($s in $sel) $nearest = mbSortObjectsByDistance($sel, $s, 0, 1, 0);
	
	for ($i=0;$i<size($nearest)-1;$i++)
	{
		if ($i < (size($nearest)-1)) select -r $nearest[$i] $nearest[$i+1];

		switch ($constraintType)
		{
			case 0:
				dynamicaUI_createConstraint(0);
				break;
			case 1:
				dynamicaUI_createConstraint(1);
				break;
			case 2:
				dynamicaUI_createConstraint(2);
				break;
			case 3:
				dynamicaUI_createConstraint(3);
				break;
		}
		refresh;
	}
	
	clear($nearest);
	clear($sel);
}

global proc dynamicaUI_createRigidBodyArray(int $activebody, int $collisionShapeType)
{
	global float $dynamicaUI_startFrame;
	float $mass = 1;
	
	if ($activebody == false) $mass = 0;
	
	global int $dynamicaUI_createArrayUI_size[];
	global float $dynamicaUI_createArrayUI_offset[];

	if(`layoutDialog -title "Create Rigid Body Array" -ui "dynamicaUI_createArrayUI"` == "OK") {    
		string $selection[] = `ls -selection -dag -leaf -showType -type "geometry"`;

		//create dSolver node if necessary
		dSolver;

		string $rigidBodyArrayNode = `dRigidBodyArray`;
		string $collisionShapeNode = `createNode dCollisionShape`;
		connectAttr ($collisionShapeNode + ".outCollisionShape") ($rigidBodyArrayNode + ".inCollisionShape");
		string $rigidBodyTransforms[] = `listRelatives -parent $rigidBodyArrayNode`;
		
		if(size($selection) != 0) {
			string $shapeTransforms[] = `listRelatives -parent $selection[0]`;
			if($selection[1] == "mesh") {
				connectAttr ($selection[0] + ".message") ($collisionShapeNode + ".inShape");
				hide $shapeTransforms[0];
			}
		}
		
		setAttr ($rigidBodyArrayNode + ".mass" ) $mass;
		setAttr ($collisionShapeNode + ".type" ) $collisionShapeType;
		
		select -r $rigidBodyTransforms[0];

		int $size[]= $dynamicaUI_createArrayUI_size;
		float $off[]= $dynamicaUI_createArrayUI_offset;
		float $x0[];
		$x0[0] = -0.5 * $size[0] * $off[0];
		$x0[1] = -0.5 * $size[1] * $off[1];
		$x0[2] = -0.5 * $size[2] * $off[2];
		setAttr ($rigidBodyArrayNode + ".numBodies") ($size[0] * $size[1] * $size[2]);
		for ($i = 0; $i < $size[0]; $i++) {
			for ($j = 0; $j < $size[1]; $j++) {
				for ($k = 0; $k < $size[2]; $k++) {
					setAttr ($rigidBodyArrayNode + ".initialPosition[" + string($i + $size[0] * $j + $size[0] * $size[1] * $k) + "]") ($x0[0] + $i * $off[0]) ($x0[1] + $j * $off[1]) ($x0[2] + $k * $off[2]);
				}
			}
		}  
		currentTime $dynamicaUI_startFrame; //force refresh		
	}
}

global proc dynamicaUI_createArrayUIdismissCB(string $button)
{
	global string $dynamicaUI_createArrayUI_sizeCT;
	global string $dynamicaUI_createArrayUI_offsetCT;

	global int $dynamicaUI_createArrayUI_size[];
	global float $dynamicaUI_createArrayUI_offset[];

	$dynamicaUI_createArrayUI_size = `intFieldGrp -query -value $dynamicaUI_createArrayUI_sizeCT`; 
	$dynamicaUI_createArrayUI_offset = `floatFieldGrp -query -value $dynamicaUI_createArrayUI_offsetCT`; 
	layoutDialog -dismiss $button;
}

global proc dynamicaUI_createArrayUI()
{
	global string $dynamicaUI_createArrayUI_sizeCT;
	global string $dynamicaUI_createArrayUI_offsetCT;

	// Get the dialog's formLayout.
	string $form = `setParent -q`;

	// layoutDialog's are not resizable, so hard code a size here,
	// to make sure all UI elements are visible.
	formLayout -e -width 400 $form;

	string $b1 = `button -l "OK"    -c "dynamicaUI_createArrayUIdismissCB(\"OK\")"`;
	string $b2 = `button -l "Cancel"-c "dynamicaUI_createArrayUIdismissCB(\"Cancel\")"`;

	$dynamicaUI_createArrayUI_sizeCT = `intFieldGrp -columnAlign 1 "left" -adj 1 -numberOfFields 3 -label "Array Size" -v1 3 -v2 3 -v3 3`;
	$dynamicaUI_createArrayUI_offsetCT = `floatFieldGrp -columnAlign 1 "left" -adj 1 -numberOfFields 3 -label "Array Offset" -v1 2.0 -v2 2.0 -v3 2.0`;

	formLayout -edit
	-attachForm            $dynamicaUI_createArrayUI_sizeCT   "top"    5
	-attachForm            $dynamicaUI_createArrayUI_sizeCT   "left"   5
	-attachNone            $dynamicaUI_createArrayUI_sizeCT   "bottom"
	-attachForm            $dynamicaUI_createArrayUI_sizeCT   "right"  5 

	-attachControl         $dynamicaUI_createArrayUI_offsetCT  "top"   5 $dynamicaUI_createArrayUI_sizeCT
	-attachForm            $dynamicaUI_createArrayUI_offsetCT  "left"   5
	-attachNone            $dynamicaUI_createArrayUI_offsetCT  "bottom"
	-attachForm            $dynamicaUI_createArrayUI_offsetCT   "right"  5 

	-attachControl         $b1  "top"   5 $dynamicaUI_createArrayUI_offsetCT
	-attachForm            $b1  "left"   5
	-attachNone            $b1  "bottom"
	-attachPosition        $b1  "right"  5 33

	-attachControl         $b2  "top"    5 $dynamicaUI_createArrayUI_offsetCT
	-attachPosition        $b2  "left"   5 33
	-attachNone            $b2  "bottom"
	-attachPosition        $b2  "right"  5 66

	$form;
}

global proc float[] dynamicaUI_worldToObj(float $pointW[], float $objToWorldMatrix[])
{
	float $result[];
	$result[0] = 0.0;
	$result[1] = 0.0;
	$result[2] = 0.0;
	float $offs[];
	if ( size($pointW) != 3 || size($objToWorldMatrix) != 16 )
	{
		warning("Point must be an array of 3 doubles and matrix must be an array of 16 doubles.");
		return $result;
	}
	for ($i = 0; $i < 3; $i++)
	{
		$offs[$i] = $pointW[$i] - $objToWorldMatrix[12 + $i];
	}
	for ($i = 0; $i < 3; $i++)
	{
		for ($j = 0; $j < 3; $j++)
		{
			$result[$i] += $objToWorldMatrix[$i * 4 + $j] * $offs[$j];
		}
	}
	return $result;
}

global proc int bulletExportOptions( string $parent, string $action, string $settings, string $callback ) 
{
	return 1;
}

global proc dynamicaUI_get3dTextureNodes() 
{
	
	global string $dynamicaUI_3dTextureList;
	
	textScrollList -e -ra $dynamicaUI_3dTextureList;
	$dynamicaUI_3dTextureNodes = `ls -type texture3d`;
	int $i;
	if (size($dynamicaUI_3dTextureNodes)) 
	{
		for ($i=0;$i<size($dynamicaUI_3dTextureNodes);$i++) {
			textScrollList -e -append $dynamicaUI_3dTextureNodes[$i] $dynamicaUI_3dTextureList;
		}
	}
	else 
	{
		textScrollList -e -append "No 3D Textures Found in Scene..." $dynamicaUI_3dTextureList;
	}
}

global proc dynamicaUI_activateAxis(int $axis)
{
	global int $dynamicaUI_activateAxis; //0 = +X, 1 = -X, 2 = +Y, 3 = -Y, 4 = +Z, 5 = -Z
	$dynamicaUI_activateAxis = $axis; 
	dynamicaUI_activateRigidBodies();
}

global proc dynamicaUI_activateRigidBodies() 
{
	global float $dynamicaUI_activateStartFrame;
	global float $dynamicaUI_activateEndFrame;
	global int $dynamicaUI_activateInputMethod; //0 = Axis Gradient, 1 = Radial Gradient, 2 = 3D Texture
	global int $dynamicaUI_activateAxis; //0 = +X, 1 = -X, 2 = +Y, 3 = -Y, 4 = +Z, 5 = -Z
	global string $dynamicaUI_activateTexture;
	global string $dynamicaUI_3dTextureNodes[];
	global string $dynamicaUI_3dTextureList;

	string $sel[] = `ls -sl`;
	string $selTmp[] = `ls -sl`;
	string $sorted[];
	float $attrs[];
	string $axis;
	int $reverseAxis;
	string $expr;
	float $texAlpha;
	int $i;

	/* init */
	clear($sorted);
	clear($attrs);

	//filter selection
	select -cl;	
	for ($s in $sel) if (mbIsType($s, "dRigidBody")) select -add $s; //if dRigidBody
	$sel = `ls -sl`;
	for ($s in $sel) if (mbIsKeyed($s)) select -d $s; //if keyed
	$sel = `ls -sl`;
	
	if (!size($sel)) 
	{
		select -r $selTmp; //restore original selection
		error("Dynamica: No rigid bodies found in selection.");
		return;
	}
	
	print("Dynamica: Activating " + size($sel) + " rigid bodies...\n");
	if ($dynamicaUI_activateInputMethod == 0) 
	{
		// filter axis
		switch ($dynamicaUI_activateAxis) 
		{
			case 0: $axis = "tx"; break;
			case 1: $axis = "tx"; $reverseAxis = 1; break;
			case 2: $axis = "ty"; break;
			case 3: $axis = "ty"; $reverseAxis = 1; break;
			case 4: $axis = "tz"; break;
			case 5: $axis = "tz"; $reverseAxis = 1; break;
			case 7: $reverseAxis = 1; break;
		}
		
		if ($dynamicaUI_activateAxis < 6) //linear axis
		{
			$sorted = mbSortObjectsByAttr($sel, $axis, 0);
			for ($o in $sorted) $attrs[size($attrs)] = `getAttr ($o + "." + $axis)`;
		}
		else //radial axis
		{
			$sorted = mbSortObjectsByDistance($sel, $sel[size($sel)-1], 0, 1, 0);
			for ($o in $sorted) $attrs[size($attrs)] = mbDistanceBetweenNodes($sorted[0], $o);
		}

		if ($reverseAxis) $attrs = mbReverseFloatArray($attrs);
		$attrs = mbScaleArray($attrs, $dynamicaUI_activateStartFrame, $dynamicaUI_activateEndFrame, 1);

		for ($i=0;$i<size($sorted);$i++) 
		{
			cutKey -at "mass" -cl $sorted[$i];
			setKeyframe -at "mass" -t 1 -v 1 $sorted[$i];
			setKeyframe -at "mass" -t 2 -v 0 $sorted[$i];
			setKeyframe -at "mass" -t $attrs[$i] -v 1 $sorted[$i];
			keyTangent -itt "flat" -ott "step" $sorted[$i];
		}
	}

	//cleanup
	clear($sel);
	clear($sorted);
	clear($attrs);
	
	print("Dynamica: " + size($sel) + " rigid bodies activated. Frame range: "
		+ $dynamicaUI_activateStartFrame + " - " + $dynamicaUI_activateEndFrame + ". Open Script Editor for details ------>\n");
}

global proc dynamicaUI_deactivateRigidBodies()
{
	string $sel[] = `ls -sl`;
	string $selTmp[] = `ls -sl`;
	
	select -cl;	
	for ($s in $sel) if (mbIsType($s, "dRigidBody")) select -add $s; //if dRigidBody
	$sel = `ls -sl`;
	
	if (!size($sel)) 
	{
		select -r $selTmp; //restore original selection
		error("Dynamica: No rigid bodies objects found in selection.");
		return;
	}
	
	for ($s in $sel)
	{
		cutKey -at "mass" -cl $s;
		setAttr ($s + ".mass") 1;
	}
	
	print("Dynamica: " + size($sel) + " rigid bodies deactivated\n");
}

global proc dynamicaUI_bakeRigidBodies()
{
	global int $dynamicaUI_deleteEmptyNodes;
	global int $dynamicaUI_deleteBakeHistory;
	global int $dynamicaUI_deleteStaticChannels;
	global int $dynamicaUI_optimizeChannels;
	global int $dynamicaUI_bakeAll;
	global float $dynamicaUI_bakeStartFrame;
	global float $dynamicaUI_bakeEndFrame;
	
	string $dBakeLayer = "DynamicaBaked";
	string $bakeGroup;
	string $sel[] = `ls -sl`;
	string $preKeyed[];
	string $baked[];
	float $progress;
	int $go = 0;
	
	select -cl;
	
	//select all rigid bodies
	if ($dynamicaUI_bakeAll) $sel = `ls -tr`;
	for ($s in $sel) if (mbIsType($s, "dRigidBody")) select -add $s;
	$sel = `ls -sl`;
	
	//remove prekeyed objects from selection
	for ($s in $sel)
	{
		if (mbIsKeyed($s))
		{
			$preKeyed[size($preKeyed)] = $s;
			select -d $s;
			warning("Dynamica: " + $s + " is already keyed, ignored.");
		}
	}
	
	$sel = `ls -sl`;
	if (!size($sel)) 
	{
		error("Dynamica: No rigid bodies to bake. Open Script Editor for details ------>");
		select -r $sel;
		return;
	}
	
	//confirm
	$confirm = `confirmDialog -t "Dynamica: Bake Rigid Bodies" -m "Bake Dynamica Simulation?\nThis action is not undoable." 
		-b "Yes" -b "No" -db "Yes" -cb "No" -ds "No"`;
	if ($confirm == "No") 
	{
		warning("Dynamica: Bake cancelled by user.");
		select -r $sel;
		return;
	}
	
	//we are go
	mbCreateLayer($dBakeLayer, 0);
	$bakeGroup = `group -em -n dBaked`;
	if ($dynamicaUI_deleteBakeHistory) delete -ch;
	undoInfo -state off;
	select -cl;
	
	//find connected transforms, modify selection
	for ($s in $sel)
	{
		$connectedTransforms = mbGetConnectedTransforms($s);
		if (size($connectedTransforms))
		{
			if (mbIsMesh($connectedTransforms[0])) select -add $connectedTransforms[0];
			mbAddToLayer($connectedTransforms[0], $dBakeLayer);
			parent $connectedTransforms[0] $bakeGroup;
		}
		else 
		{
			select -add $s;
			mbAddToLayer($s, $dBakeLayer);
			parent $s $bakeGroup;
		}
	}
	
	//bake!
	print("Dynamica: Starting bake...");
	$baked = `ls -sl`;
	cycleCheck -e off;
	bakeResults 
		-simulation true 
		-t ((string)$dynamicaUI_bakeStartFrame + ":" + (string)$dynamicaUI_bakeEndFrame) 
		-sampleBy 1 
		-disableImplicitControl true 
		-preserveOutsideKeys true 
		-sparseAnimCurveBake false 
		-controlPoints false 
		-shape false 
		-at "tx" 
		-at "ty" 
		-at "tz" 
		-at "rx" 
		-at "ry" 
		-at "rz";
	
	select -cl;
	
	//delete orphans
	print("Dynamica: Removing orphaned rigid bodies and constraints...\n");
	for ($s in $sel) 
	{
		select -add $s;
		string $conn[];
		$rels = `listRelatives $s`;
		if (size($rels)) $conn = `listConnections $rels`;
		for($c in $conn)
		{
			$shape = mbGetShape($c);
			if (size($shape))
			{					
				if (`nodeType $shape` == "dNailConstraint" && `objExists $c` == true) select -add $c;
				if (`nodeType $shape` == "dHingeConstraint" && `objExists $c` == true) select -add $c;
				if (`nodeType $shape` == "dSliderConstraint" && `objExists $c` == true) select -add $c;
				if (`nodeType $shape` == "dSixdofConstraint" && `objExists $c` == true) select -add $c;
			}
		}

		if (mbIsType($s, "dRigidBody"))
		{
			$connectedTransforms = mbGetConnectedTransforms($s);
			if (!size($connectedTransforms)) select -d $s;
		}
	}
	print("Dynamica: " + size($sel) + " orphans found, deleting...\n");
	delete;
	
	if ($dynamicaUI_deleteStaticChannels) 
	{
		print("Dynamica: Removing static channels...\n");
		//delete -staticChannels -uac 0 -hi none -cp 0 -s 0; //brute force - kills all static channels in scene
		for ($b in $baked)
		{
			if (size($preKeyed)) 
			{
				for ($p in $preKeyed)
				{
					if ($b != $p)
					{
						delete -staticChannels -uac 0 -hi none -cp 0 -s 0 $b;
						break;
					}
					else
					{
						break;
					}
				}
			} 
			else 
			{
				delete -staticChannels -uac 0 -hi none -cp 0 -s 0 $b;
			}
		}
	}
	
	if ($dynamicaUI_deleteEmptyNodes)
	{
		print("Dynamica: Removing empty nodes...\n");
		for ($i=0;$i<10;$i++) //trace depth, 10 should clear most nested hierarchies
		{
			for ($n in `ls -o -tr`)
			{
				string $shapes[] = `listRelatives $n`;
				if (size($shapes) == 0) delete $n;
			}
		}
	}

	if ($dynamicaUI_deleteBakeHistory)
	{
		print("Dynamica: Removing history...\n");
		delete -all -ch;
	}
	
	clear($preKeyed);
	undoInfo -state on;
	print("Dynamica: " + size($sel) + " rigid bodies baked on frames " + $dynamicaUI_bakeStartFrame + " - " + $dynamicaUI_bakeEndFrame + ". Open Script Editor for details ------>\n");
	clear($sel);
}

//script jobs
global proc dynamicaUI_onSceneOpen()
{
	global int $dynamicaUI_syncSolverJob;
	if (!`scriptJob -exists $dynamicaUI_syncSolverJob`)
	{
		$dynamicaUI_syncSolverJob = `scriptJob -kws -e "playbackRangeChanged" dynamicaUI_syncSolver`;
	}
}

global proc dynamicaUI_syncSolver()
{
	if (`objExists dSolver1`)
	{
		global float $dynamicaUI_startFrame;
		float $startFrame = `playbackOptions -q -min`;
		setAttr "dSolver1.startTime" $startFrame;
		$dynamicaUI_startFrame = $startFrame;
		print("Dynamica: Updated solver Start Time to: " + (string)$dynamicaUI_startFrame + "\n");
	}
}

//volume computation...
// float $obVolume;
// float $minVolume = 10000;
// float $maxVolume = 0;
// float $massMin = 1;
// float $massMax = 100;
// for ($i = 0; $i < size($selection) / 2; $i++) 
// {
// $obVolume = mbMeshVolume($obSelection[$i]);
// if ($obVolume > $maxVolume) $maxVolume = $obVolume;
// if ($obVolume < $minVolume) $minVolume = $obVolume;
// }
//$obVolume = mbMeshVolume($obSelection[$i]);
//$mass = mbScaleValue($obVolume, $minVolume, $maxVolume, $massMin, $massMax);